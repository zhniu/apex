/*******************************************************************************
 * COPYRIGHT (C) Ericsson 2016-2018
 * 
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 ******************************************************************************/

// tag::xtext[]
grammar com.ericsson.apex.auth.xtext.apexnotepad.ApexNotepad hidden(WS, ML_COMMENT, SL_COMMENT)
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate apexNotepad "http://www.ericsson.com/apex/auth/xtext/apexnotepad/ApexNotepad"
// end::xtext[]


// tag::grammar[]
// tag::rules[]
// tag::model[]
Model:
    (defaults=Defaults)? model=PolicyModel
;
// end::model[]

// tag::defaults[]
Defaults:
    "defaults:"
    'version' '=' version=VERSION
    ('event-name-space' '=' namespace=NAMESPACE)?
    ('event-source' '=' source=ID)?
    ('event-target' '=' target=ID)?
  ';'
;
// end::defaults[]

// tag::policymodel[]
PolicyModel:
  'create-model:'
  'name' '=' name=ID
  ('uuid' '=' uuid=UUID)?
  'description' '=' description=MultiInput
  (schemas+=SchemaDecl)+
  (albums+=ContextAlbumDecl)?
  (events+=EventDecl)+
  (tasks+=TaskDef)+
  (policies+=PolicyDef)+
;
// end::policymodel[]

// tag::schemadecl[]
SchemaDecl:
    'declare-schema:'
    'name' '=' name=ID
    ('uuid' '=' uuid=UUID)?
    'description' '=' description=MultiInput
    (java=SchemaDeclFlavorJava | avro=SchemaDeclFlavorAvro)
  ';'
;
// end::schemadecl[]

// tag::schemadeclflavorjava[]
SchemaDeclFlavorJava:
    'flavor' '=' 'JAVA'
    'schema' '=' javaClassFQCN=NAMESPACE
;
// end::schemadeclflavorjava[]

// tag::schemadeclflavoravro[]
SchemaDeclFlavorAvro:
    'flavor' '=' 'AVRO'
    'schema' '=' schema=MultiInput
;
// end::schemadeclflavoravro[]

// tag::contextalbumdecl[]
ContextAlbumDecl:
    'declare-context-album:'
    'name' '=' name=ID
    ('uuid' '=' uuid=UUID)?
    'description' '=' description=MultiInput
    'scope' '=' scope=ContextAlbumDeclScope
    'writable' '=' writable=BOOLEAN
    'schema-name' '=' schemaName=[SchemaDecl]
    ';'
;
// end::contextalbumdecl[]

// tag::contextalbumdeclscope[]
ContextAlbumDeclScope:
    'APPLICATION' | 'EXTERNAL' | 'GLOBAL'
;
// end::contextalbumdeclscope[]

// tag::eventdecl[]
EventDecl:
    'declare-event:'
    'name' '=' name=ID
    ('uuid' '=' uuid=UUID)?
    'description' '=' description=MultiInput
    ('name-space' '=' namespace=NAMESPACE)?
    'source' '=' source=ID
    'target' '=' target=ID
    (fields+=EventDeclField)+
    ';'
;
// end::eventdecl[]

// tag::eventdeclfield[]
EventDeclField:
    'with-field:'
    'name' '=' name=ID
    'schema-name' '=' schemaName=[SchemaDecl]
    'optional' '=' optional=BOOLEAN
;
// end::eventdeclfield[]

// tag::taskdef[]
TaskDef:
    'define-task:'
    'name' '=' name=ID
    ('uuid' '=' uuid=UUID)?
    'description' '=' description=MultiInput
    (infields+=TaskDefInputField)+
    (outfields+=TaskDefOutputField)+
    logic=TaskDefLogic
    (parameters+=TaskDefParameter)?
    (contextRefs+=TaskDefContexRef)*
    ';'
;
// end::taskdef[]

// tag::taskdefinputfield[]
TaskDefInputField:
    'with-input-field:'
    'name' '=' name=ID
    'schema-name' '=' schemaName=[SchemaDecl]
;
// end::taskdefinputfield[]

// tag::taskdefoutputfield[]
TaskDefOutputField:
    'with-output-field:'
    'name' '=' name=ID
    'schema-name' '=' schemaName=[SchemaDecl]
;
// end::taskdefoutputfield[]

// tag::taskdeflogic[]
TaskDefLogic:
    'with-logic:'
    'flavor' '=' flavor=LogicFlavor
    'logic' '=' logic=MultiInput
;
// end::taskdeflogic[]

// tag::taskdefparameter[]
TaskDefParameter:
    'with-parameter:'
    'name' '=' name=ID
    'default-value' '=' defaultValue=STRING
;
// end::taskdefparameter[]

// tag::taskdefcontextref[]
TaskDefContexRef:
    'with-context-reference:'
    'album-name' '=' albumName=[ContextAlbumDecl]
;
// end::taskdefcontextref[]

// tag::policydef[]
PolicyDef:
    'define-policy:'
    'name' '=' name=ID
    ('uuid' '=' uuid=UUID)?
    'description' '=' description=MultiInput
    (states+=PolicyStateDef)+
    'first-state' '=' firstState=[PolicyStateDef]
    ';'
;
// end::policydef[]

// tag::policystatedef[]
PolicyStateDef:
    'with-state:'
    'name' '=' name=ID
    'trigger-name' '=' triggerName=[EventDecl]
    'default-task-name' '=' defaultTask=[TaskDef]
    (outputs+=PolicyStateOutput)+
    (tasks+=PolicyStateTask)+
    tslogic=PolicyStateTaskSelectionLogic?
    (finalizers+=PolicyStateFinalizerLogic)*
    (ctxrefs+=PolicyStateContextRef)*
    ';'
;
// end::policystatedef[]

// tag::policystateoutput[]
PolicyStateOutput:
    'add-state-output:'
    'output-name' '=' name=ID
    'event-name' '=' eventName=[EventDecl]
    ('next-state' '=' nextState=[PolicyStateDef])?
;
// end::policystateoutput[]

// tag::policystatetsl[]
PolicyStateTaskSelectionLogic:
    'add-state-taskselection-logic:'
    'flavor' '=' flavor=LogicFlavor
    'logic' '=' logic=MultiInput
;
// end::policystatetsl[]

// tag::policystatetask[]
PolicyStateTask:
    'add-state-task:'
    'task-name' '=' taskName=[TaskDef]
    'output-type' '=' outputType=("DIRECT" | "LOGIC")
    'output-name' '=' outputName=[PolicyStateOutput]
;
// end::policystatetask[]

// tag::policystatefinalizerlogic[]
PolicyStateFinalizerLogic:
    'add-state-finalizer-logic:'
    'name' '=' name=ID //TODO check w/o version
    'flavor' '=' flavor=LogicFlavor
    'logic' '=' logic=MultiInput
;
// end::policystatefinalizerlogic[]

// tag::policystatecontextref[]
PolicyStateContextRef:
    'add-state-context-reference:'
    'album-name' '=' albumName=[ContextAlbumDecl]
;
// end::policystatecontextref[]

// tag::logicflavor[]
LogicFlavor:
    "JAVASCRIPT" | "JAVA" | "JYTHON" | "JRUBY" | "MVEL" | STRING
;
// end::logicflavor[]

// tag::multiinput[]
MultiInput:
    asString=STRING | block=INPUT_BLOCK | file=MacroFile
;
// end::multiinput[]

// tag::macrofile[]
MacroFile:
    'file:' STRING
;
// end::macrofile[]
// end::rules[]

// tag::lexer[]
// tag::lexer_int[]
terminal INT returns ecore::EInt:
    ('0'..'9')+
;
// end::lexer_int[]

// tag::lexer_uuid[]
terminal UUID:
    HEX8 '-' HEX4 '-' HEX4 '-' HEX4 '-' HEX12
;
terminal fragment HEX8:
    HEX HEX HEX HEX HEX HEX HEX HEX
;
terminal fragment HEX4:
    HEX HEX HEX HEX
;
terminal fragment HEX12:
    HEX HEX HEX HEX HEX HEX HEX HEX HEX HEX HEX HEX
;
terminal HEX:
    ('a'..'f'|'A'..'F'|'0'..'9')
;
// end::lexer_uuid[]

// tag::lexer_boolean[]
terminal BOOLEAN:
    'true' | 'false';
// end::lexer_boolean[]

// tag::lexer_string[]
terminal STRING:
    '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
;
// end::lexer_string[]

// tag::lexer_version[]
terminal VERSION:
    INT+ '.' INT+ '.' INT+;
// end::lexer_version[]

// tag::lexer_id[]
terminal ID:
    '^'? (('A'..'Z' | 'a'..'z' | '0'..'9')* ('_' | '-'))* ('A'..'Z' | 'a'..'z' | '0'..'9')+
    (':' INT+ '.' INT+ '.' INT+)?
;
// end::lexer_id[]

// tag::lexer_namespace[]
terminal NAMESPACE:
    '^'? (('A'..'Z' | 'a'..'z' | '0'..'9')* ('_' | '-'))* ('A'..'Z' | 'a'..'z' | '0'..'9')+
    ('.' '^'? (('A'..'Z' | 'a'..'z' | '0'..'9')* ('_' | '-'))* ('A'..'Z' | 'a'..'z' | '0'..'9')+)+
;
// end::lexer_namespace[]

// tag::lexer_comments[]
terminal ML_COMMENT:
    '/*' -> '*/';
terminal SL_COMMENT:
    ('//' | '#') !('\n'|'\r')* ('\r'? '\n')?
;
// end::lexer_comments[]

// tag::lexer_inputblock[]
terminal INPUT_BLOCK:
    '«' .* '»'
;
// end::lexer_inputblock[]

// tag::lexer_ws[]
terminal WS:
    (' '|'\t'|'\r'|'\n')+
;
// end::lexer_ws[]

// tag::lexer_anyother[]
terminal ANY_OTHER:
    . | EOF
;
// end::lexer_anyother[]
// end::lexer[]
// end::grammar[]
